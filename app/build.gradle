apply plugin: 'com.android.application' // App插件，可以生成一个可运行的apk应用
apply plugin: 'io.objectbox' // objectbox 数据库插件
apply from: 'config.gradle' // 引入config.gradle
android {
    compileSdkVersion configInfo.compileSdkVersion // 编译所依赖的Android SDK的版本
    buildToolsVersion configInfo.buildToolsVersion // 构建该Android工程所用构建工具的版本
    // 默认配置
    defaultConfig {
        applicationId configInfo.applicationId // 包名，AndroidManifest.xml文件中配置的manifest标签的package属性值
        minSdkVersion configInfo.minSdkVersion // 最低支持的Android系统的API Level，Android5.0
        targetSdkVersion configInfo.targetSdkVersion // 基于哪个版本开发的
        versionCode configInfo.versionCode // App应用内部版本号
        versionName configInfo.versionName // App应用的版本每次，用户可以看到，就是我们发布的版本
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true //  lombok需要添加该行
                arguments = [AROUTER_MODULE_NAME: project.getName()]  // arouter
            }
        }
        ndk {
            // opencv 没有arm64。 32bit的库文件不能和64bit的库文件不能混合使用。因此，有一种解决办法是过滤掉64bit的库文件，全部使用32bit的库文件
            abiFilters "armeabi", "armeabi-v7a"
        }
        repositories {
            flatDir {
                dirs "libs"
            }
        }
    }
    // 用来加载so库
    sourceSets {
        main { // 这里对main SourceSet配置
            jni.srcDirs = [] // jni源集的Java源文件所在目录
            jniLibs.srcDirs = ['libs'] // jniLibs源集的资源文件所在目录
        }
    }
    // 签名配置
    signingConfigs {
        // debug 模式，Android SDK为我们提供了默认的debug签名证书
        // release 模式
        release {
            storeFile file('D:/TgAndroidAppKeys/' + configInfo.baseName + '.jks') // 签名证书文件
            storePassword configInfo.signStorePassword // 签名证书文件的密码
            keyAlias configInfo.signKeyAlias // 签名证书中秘钥别名
            keyPassword configInfo.signKeyPassword // 签名证书中该秘钥的密码
        }
    }
    buildTypes {
        release {
            debuggable false // 是否生产一个可供调试的apk
            jniDebuggable false // 是否生产一个可供调试的Jni(C/C++)代码的apk
            signingConfig signingConfigs.release // 签名
            zipAlignEnabled true // Zipalign优化，发布之前一定要进行优化，提高系统和应用的运行效率，更快的读写apk中的资源，降低内存的使用
            shrinkResources true // 移除无用的resource
            minifyEnabled true // 开启混淆,我们新建的工程默认为false，因此，如果我们需要开启混淆的话就需要手动设为true。
            // 这部分有两段，前一段代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，免去了我们很多事，这个文件的目录在/tools/proguard/proguard-android.txt , 后一部分是我们项目里的自定义的混淆文件，目录就在 app/proguard-rules.pro,在这个文件里我们可以声明一些我们所需要的定制的混淆规则。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // applicationVariants(只适用于 app plugin) libraryVariants(只适用于 library plugin)
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${configInfo.fullName}_${variant.versionName}_${buildTime()}.apk"
        }
    }
}
// 仓库地址
repositories {
    maven { url "file://${configInfo.localRepositoryUrl}" }  //本地Maven仓库地址
    maven { url "http://${configInfo.serverlHost}/repository/maven-public/" }
    google()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    // 从api 26开始，support libraries 需要从google的maven仓库下载，所以需要在project的build.gradle中allprojects 添加如下配置即可
    maven { url "https://maven.google.com" }
}
// 打包时间
def static buildTime() {
    return new Date().format('yyyyMMddHHmm')
}
// 依赖
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation("com.turingoal:tg-common-lib-core-app:" + libVersions.tgCommonLibCoreVersion) {
        transitive = false //关闭依赖传递特性
    }
    implementation("com.turingoal.bts:tg-bts-common-lib-app:" + libVersions.tgBtsCommonLibVersion) {
        transitive = false //关闭依赖传递特性
    }
    implementation 'com.android.support:design:' + libVersions.supportVersion // md风格控件
    implementation 'com.android.support:appcompat-v7:' + libVersions.supportVersion  // 兼容包
    implementation 'com.android.support:cardview-v7:' + libVersions.supportVersion // cardview
    implementation 'com.android.support.constraint:constraint-layout:' + libVersions.supportConstraintVersion
    // 布局
    implementation 'javax.annotation:javax.annotation-api:' + libVersions.annotationApiVersion // 注解
    implementation 'org.projectlombok:lombok:' + libVersions.lombokVersion // lombok
    implementation 'com.blankj:alog:' + libVersions.alogVersion //  日志
    implementation 'com.blankj:utilcode:' + libVersions.utilcodeVersion //  工具类包
    implementation 'com.alibaba:arouter-api:' + libVersions.arouterApiVersion // arouter页面路由
    annotationProcessor 'com.alibaba:arouter-compiler:' + libVersions.arouterCompilerVersion
    implementation 'com.jakewharton:butterknife:' + libVersions.butterknifeVersion // butterknife
    annotationProcessor 'com.jakewharton:butterknife-compiler:' + libVersions.butterknifeVersion
    implementation 'com.google.code.gson:gson:' + libVersions.gsonVersion // gson
    implementation 'com.squareup.retrofit2:retrofit:' + libVersions.retrofitVersion // retrofit
    implementation 'com.squareup.retrofit2:converter-gson:' + libVersions.retrofitVersion
    implementation 'com.squareup.okhttp3:logging-interceptor:' + libVersions.retrofitLoggingVersion
    // 日志
    implementation 'com.afollestad.material-dialogs:core:' + libVersions.materialDialogsVersion
    // md风格dialog
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:' + libVersions.BRVAHVersion
    // 下拉刷行库
    implementation 'com.github.barteksc:android-pdf-viewer:' + libVersions.pdfViewerVersion // pdf预览
    implementation 'com.github.bumptech.glide:glide:' + libVersions.glideVersion // glide图片加载
    annotationProcessor 'com.github.bumptech.glide:compiler:' + libVersions.glideVersion
    implementation 'org.greenrobot:eventbus:' + libVersions.eventbusVersion // EventBus
    implementation 'com.scwang.wave:MultiWaveHeader:' + libVersions.waveVersion // 波纹特效控件
    implementation 'com.github.chrisbanes:PhotoView:' + libVersions.photoViewVersion // 缩放图片
    implementation 'com.turingoal:tg-photopicker:' + libVersions.tgPhotopickerVersion // 照片选择库
    implementation 'net.lingala.zip4j:zip4j:' + libVersions.zip4jVersion // zip包
    implementation 'com.youth.banner:banner:' + libVersions.bannerVersion // 轮播图
}